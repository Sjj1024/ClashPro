name: Release Build # 工作流的名称

on:
  workflow_dispatch: # 允许手动触发工作流

permissions: write-all # 授予工作流对所有资源的写权限

env:
  CARGO_INCREMENTAL: 0 # 禁用 Rust 的增量编译
  RUST_BACKTRACE: short # 设置 Rust 的 backtrace 输出为简短模式

jobs:
  release:
    strategy:
      fail-fast: false # 如果其中一个任务失败，不会立即停止其他任务
      matrix:
        include:
          - os: windows-latest # 操作系统：Windows
            target: x86_64-pc-windows-msvc # 目标架构：x86_64
          - os: windows-latest
            target: aarch64-pc-windows-msvc # 目标架构：aarch64
          - os: macos-latest # 操作系统：macOS
            target: aarch64-apple-darwin # 目标架构：aarch64
          - os: macos-latest
            target: x86_64-apple-darwin # 目标架构：x86_64
          - os: ubuntu-22.04 # 操作系统：Ubuntu 22.04
            target: x86_64-unknown-linux-gnu # 目标架构：x86_64

    runs-on: ${{ matrix.os }} # 在指定的操作系统上运行
    steps:
      - name: Checkout Repository # 检出代码库
        uses: actions/checkout@v4

      - name: Install Rust Stable # 安装稳定版的 Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Add Rust Target # 添加 Rust 目标架构
        run: rustup target add ${{ matrix.target }}

      - name: Rust Cache # 设置 Rust 缓存
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri # 指定工作区
          cache-all-crates: true # 缓存所有 crate

      - name: Install dependencies (ubuntu only) # 仅在 Ubuntu 上安装依赖
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libayatana-appindicator3-dev librsvg2-dev patchelf

      - name: Install Node # 安装 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - uses: pnpm/action-setup@v4 # 安装 pnpm
        name: Install pnpm
        with:
          run_install: false

      - name: Pnpm install and check # 使用 pnpm 安装依赖并检查
        run: |
          pnpm i
          pnpm check ${{ matrix.target }}

      - name: Tauri build # 使用 Tauri 构建应用程序
        uses: tauri-apps/tauri-action@v0
        env:
          NODE_OPTIONS: "--max_old_space_size=4096" # 设置 Node.js 内存限制
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub Token
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }} # Tauri 签名私钥
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }} # Tauri 私钥密码
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }} # Apple 证书
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }} # Apple 证书密码
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }} # Apple 签名标识
          APPLE_ID: ${{ secrets.APPLE_ID }} # Apple ID
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }} # Apple 密码
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }} # Apple 团队 ID
        with:
          tagName: v__VERSION__ # 发布标签
          releaseName: "Clash Verge Rev v__VERSION__" # 发布名称
          releaseBody: "More new features are now supported." # 发布描述
          tauriScript: pnpm # 使用 pnpm 运行 Tauri 脚本
          args: --target ${{ matrix.target }} # 构建目标

      - name: Portable Bundle # 生成便携版（仅限 Windows）
        if: matrix.os == 'windows-latest'
        run: pnpm portable ${{ matrix.target }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-for-linux-arm: # 针对 Linux ARM 架构的构建任务
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            target: aarch64-unknown-linux-gnu # 目标架构：aarch64
            arch: arm64
          - os: ubuntu-22.04
            target: armv7-unknown-linux-gnueabihf # 目标架构：armv7
            arch: armhf
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository # 检出代码库
        uses: actions/checkout@v4

      - name: Install Rust Stable # 安装稳定版的 Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Add Rust Target # 添加 Rust 目标架构
        run: rustup target add ${{ matrix.target }}

      - name: Rust Cache # 设置 Rust 缓存
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          cache-all-crates: true

      - name: Install Node # 安装 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install pnpm # 安装 pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Pnpm install and check # 使用 pnpm 安装依赖并检查
        run: |
          pnpm i
          pnpm check ${{ matrix.target }}

      - name: "Setup for linux" # 设置 Linux 环境
        run: |-
          sudo ls -lR /etc/apt/

          cat > /tmp/sources.list << EOF
          deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu jammy main multiverse universe restricted
          deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu jammy-security main multiverse universe restricted
          deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu jammy-updates main multiverse universe restricted
          deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu jammy-backports main multiverse universe restricted

          deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports jammy main multiverse universe restricted
          deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports jammy-security main multiverse universe restricted
          deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates main multiverse universe restricted
          deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports jammy-backports main multiverse universe restricted
          EOF

          sudo mv /etc/apt/sources.list /etc/apt/sources.list.default
          sudo mv /tmp/sources.list /etc/apt/sources.list

          sudo dpkg --add-architecture ${{ matrix.arch }}
          sudo apt update

          sudo apt install -y \
            libwebkit2gtk-4.1-dev:${{ matrix.arch }} \
            libayatana-appindicator3-dev:${{ matrix.arch }} \
            libssl-dev:${{ matrix.arch }} \
            patchelf:${{ matrix.arch }} \
            librsvg2-dev:${{ matrix.arch }}

      - name: "Install aarch64 tools" # 安装 aarch64 工具链
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt install -y \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu

      - name: "Install armv7 tools" # 安装 armv7 工具链
        if: matrix.target == 'armv7-unknown-linux-gnueabihf'
        run: |
          sudo apt install -y \
            gcc-arm-linux-gnueabihf \
            g++-arm-linux-gnueabihf

      - name: Build for Linux # 构建 Linux 应用程序
        run: |
          export PKG_CONFIG_ALLOW_CROSS=1
          if [ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]; then
            export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig/:$PKG_CONFIG_PATH
            export PKG_CONFIG_SYSROOT_DIR=/usr/aarch64-linux-gnu/
          elif [ "${{ matrix.target }}" == "armv7-unknown-linux-gnueabihf" ]; then
            export PKG_CONFIG_PATH=/usr/lib/arm-linux-gnueabihf/pkgconfig/:$PKG_CONFIG_PATH
            export PKG_CONFIG_SYSROOT_DIR=/usr/arm-linux-gnueabihf/
          fi
          pnpm build --target ${{ matrix.target }}
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: Get Version # 获取版本号
        run: |
          sudo apt-get update
          sudo apt-get install jq
          echo "VERSION=$(cat package.json | jq '.version' | tr -d '"')" >> $GITHUB_ENV
          echo "BUILDTIME=$(TZ=Asia/Shanghai date)" >> $GITHUB_ENV

      - name: Upload Release # 上传发布文件
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{env.VERSION}}
          name: "Clash Verge Rev v${{env.VERSION}}"
          body: "More new features are now supported."
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb
            src-tauri/target/${{ matrix.target }}/release/bundle/rpm/*.rpm

  release-for-fixed-webview2: # 针对固定 WebView2 版本的构建任务
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            arch: x64
          - os: windows-latest
            target: i686-pc-windows-msvc
            arch: x86
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            arch: arm64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository # 检出代码库
        uses: actions/checkout@v4

      - name: Add Rust Target # 添加 Rust 目标架构
        run: rustup target add ${{ matrix.target }}

      - name: Rust Cache # 设置 Rust 缓存
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri

      - name: Install Node # 安装 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - uses: pnpm/action-setup@v4 # 安装 pnpm
        name: Install pnpm
        with:
          run_install: false

      - name: Pnpm install and check # 使用 pnpm 安装依赖并检查
        run: |
          pnpm i
          pnpm check ${{ matrix.target }}

      - name: Download WebView2 Runtime # 下载 WebView2 运行时
        run: |
          invoke-webrequest -uri https://github.com/westinyang/WebView2RuntimeArchive/releases/download/109.0.1518.78/Microsoft.WebView2.FixedVersionRuntime.109.0.1518.78.${{ matrix.arch }}.cab -outfile Microsoft.WebView2.FixedVersionRuntime.109.0.1518.78.${{ matrix.arch }}.cab
          Expand .\Microsoft.WebView2.FixedVersionRuntime.109.0.1518.78.${{ matrix.arch }}.cab -F:* ./src-tauri
          Remove-Item .\src-tauri\tauri.windows.conf.json
          Rename-Item .\src-tauri\webview2.${{ matrix.arch }}.json tauri.windows.conf.json

      - name: Tauri build # 使用 Tauri 构建应用程序
        id: build
        uses: tauri-apps/tauri-action@v0
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tauriScript: pnpm
          args: --target ${{ matrix.target }}

      - name: Rename # 重命名构建文件
        run: |
          $files = Get-ChildItem ".\src-tauri\target\${{ matrix.target }}\release\bundle\nsis\*-setup.exe"
          foreach ($file in $files) {
            $newName = $file.Name -replace "-setup\.exe$", "_fixed_webview2-setup.exe"
            Rename-Item $file.FullName $newName
          }

          $files = Get-ChildItem ".\src-tauri\target\${{ matrix.target }}\release\bundle\nsis\*.nsis.zip"
          foreach ($file in $files) {
            $newName = $file.Name -replace "-setup\.nsis\.zip$", "_fixed_webview2-setup.nsis.zip"
            Rename-Item $file.FullName $newName
          }

          $files = Get-ChildItem ".\src-tauri\target\${{ matrix.target }}\release\bundle\nsis\*.nsis.zip.sig"
          foreach ($file in $files) {
            $newName = $file.Name -replace "-setup\.nsis\.zip\.sig$", "_fixed_webview2-setup.nsis.zip.sig"
            Rename-Item $file.FullName $newName
          }

      - name: Upload Release # 上传发布文件
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{steps.build.outputs.appVersion}}
          name: "Clash Verge Rev v${{steps.build.outputs.appVersion}}"
          body: "More new features are now supported."
          token: ${{ secrets.GITHUB_TOKEN }}
          files: src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*setup*

      - name: Portable Bundle # 生成便携版（仅限 Windows）
        run: pnpm portable-fixed-webview2 ${{ matrix.target }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-update: # 更新发布的任务
    runs-on: ubuntu-latest
    needs: [release, release-for-linux-arm] # 依赖前面的任务
    steps:
      - name: Checkout repository # 检出代码库
        uses: actions/checkout@v4

      - name: Install Node # 安装 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - uses: pnpm/action-setup@v4 # 安装 pnpm
        name: Install pnpm
        with:
          run_install: false

      - name: Pnpm install # 使用 pnpm 安装依赖
        run: pnpm i

      - name: Release updater file # 更新发布文件
        run: pnpm updater
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-update-for-fixed-webview2: # 更新固定 WebView2 版本发布的任务
    runs-on: ubuntu-latest
    needs: [release-for-fixed-webview2] # 依赖前面的任务
    steps:
      - name: Checkout repository # 检出代码库
        uses: actions/checkout@v4

      - name: Install Node # 安装 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - uses: pnpm/action-setup@v4 # 安装 pnpm
        name: Install pnpm
        with:
          run_install: false

      - name: Pnpm install # 使用 pnpm 安装依赖
        run: pnpm i

      - name: Release updater file # 更新发布文件
        run: pnpm updater-fixed-webview2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  submit-to-winget: # 提交到 Winget 的任务
    runs-on: ubuntu-latest
    needs: [release-update] # 依赖前面的任务
    steps:
      - name: Checkout repository # 检出代码库
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get Version # 获取版本号
        run: |
          sudo apt-get update
          sudo apt-get install jq
          echo "VERSION=$(cat package.json | jq '.version' | tr -d '"')" >> $GITHUB_ENV
      - name: Submit to Winget # 提交到 Winget
        uses: vedantmgoyal9/winget-releaser@main
        with:
          identifier: ClashVergeRev.ClashVergeRev
          version: ${{env.VERSION}}
          release-tag: v${{env.VERSION}}
          installers-regex: '_(arm64|x64|x86)-setup\.exe$'
          token: ${{ secrets.WINGET_TOKEN  }}
